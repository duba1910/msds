cfm<-c(68,72,72,74,72,69,75,75,72,73,70,71,71,72,73,72,70,72,73,74)
fans<-data.frame(cfm)
View(fans)
#Ungrouped Frequency Distribution
frequency.dist.ungrouped(fans$cfm)
require(lolcat)
cfm<-c(68,72,72,74,72,69,75,75,72,73,70,71,71,72,73,72,70,72,73,74)
fans<-data.frame(cfm)
View(fans)
#Ungrouped Frequency Distribution
frequency.dist.ungrouped(fans$cfm)
casting_data <- read.table( "castings.txt", header = TRUE)
# Display the dataframe
print(casting_data)
#Grouped Frequency Distribution
frequency.dist.grouped(castings$weight)
#Grouped Frequency Distribution
frequency.dist.grouped(casting_data$weight)
#Grouped Frequency Distribution
frequency.dist.grouped(castings$weight)
castings <- read.table( "castings.txt", header = TRUE)
# Display the dataframe
print(castings)
#Grouped Frequency Distribution
frequency.dist.grouped(castings$weight)
cfm<-c(68,72,72,74,72,69,75,75,72,73,70,71,71,72,73,72,70,72,73,74)
fans<-data.frame(cfm)
View(fans)
frequency.dist.ungrouped(fans$cfm)
frequency.polygon.ungrouped(fans$cfm, main="Ungrouped Freq Polygon: Fans Data",xlab="CFM")
frequency.polygon.grouped(castings$weight, main="Grouped Frequency Polygon: Casting Weight",xlab="Casting Weight")
hist.ungrouped(fans$cfm, main="Ungrouped Histogram",xlab="CFM")
hist.grouped(castings$weight, main="Grouped Histogram: Castings",xlab="Weight")
cfm<-c(68,72,72,74,72,69,75,75,72,73,70,71,71,72,73,72,70,72,73,74)
fans<-data.frame(cfm)
View(fans)
frequency.dist.ungrouped(fans$cfm)
frequency.polygon.ungrouped(fans$cfm, main="Ungrouped Freq Polygon: Fans Data",xlab="CFM")
frequency.polygon.grouped(castings$weight, main="Grouped Frequency Polygon: Casting Weight",xlab="Casting Weight")
require(lolcat)
castings <- read.table( "castings.txt", header = TRUE)
hist.grouped(castings$weight, xlab="Weight", freq=F)
lines(density(castings$weight))
plot(density(castings$weight), main="Density Plot of Casting Weight", xlab="Weight")
dp<-density(castings$weight)
plot(dp, main="Density Plot of Casting Weight", xlab="Weight")
polygon(dp, col="red", border="black")
require(lolcat)
castings <- read.table( "castings.txt", header = TRUE)
summary(castings$weight)
boxplot(castings$weight, main="Boxplot of Casting Weight", ylab="Weight")
boxplot(castings$weight, main="Boxplot of Casting Weight", ylab="Weight", notch=T)
boxplot(weight ~ mold, data = castings3, main="Boxplot of Casting Weight by Mold", ylab="Weight")
castings3 <- read.table( "castings3.txt", header = TRUE)
boxplot(weight ~ mold, data = castings3, main="Boxplot of Casting Weight by Mold", ylab="Weight")
require(lolcat)
castings <- read.table( "castings.txt", header = TRUE)
castings3 <- read.table( "castings3.txt", header = TRUE)
summary(castings$weight)
boxplot(castings$weight, main="Boxplot of Casting Weight", ylab="Weight")
boxplot(castings$weight, main="Boxplot of Casting Weight", ylab="Weight", notch=T)
boxplot(weight ~ mold, data = castings3, main="Boxplot of Casting Weight by Mold", ylab="Weight")
require(lolcat)
# Create data file
weight<-c(65,67,36,37,36,57,53,39,38,58)
preform<-data.frame(weight)
View(preform)
(fdcast<-frequency.dist.grouped(castings$weight))
# Look at the structure of fdcast
str(fdcast)
castings <- read.table( "castings.txt", header = TRUE)
table(preform$weight)
sample.mode(preform$weight)
# Create data file
weight<-c(65,67,36,37,36,57,53,39,38,58)
preform<-data.frame(weight)
View(preform)
# Find the range of values in the data set
range(preform$weight)
castings <- read.table( "castings.txt", header = TRUE)
# Calculate skewness for the castings data
skewness(castings$weight)
round.object(skewness(castings$weight),3)
# Calculate kurtosis for the castings data
kurtosis(castings$weight)
round.object(kurtosis(castings$weight),3)
# Calculate descriptive statistics using the summary.continuous command
summary.continuous(castings$weight, stat.sd=T)
# Transpose the output and remove the quotes
t(round.object(summary.continuous(castings$weight, stat.sd=T),3))
noquote(t(round.object(summary.continuous(castings$weight, stat.sd=T),3)))
# Create a function to round, transpose and remove the quotes
nqtr<-function(x,d){noquote(t(round.object(x, d)))}
nqtr(summary.continuous(castings$weight),3)
airline <- read.table( "airline.txt", header = TRUE)
airline <- read.table( "airline.txt", header = TRUE)
airline <- read.table( "airline.dat", header = TRUE)
lines <- readLines("airline.dat")
# Initialize an empty list to store fixed lines
fixed_lines <- list()
# Iterate through each line and fix lines with fewer than 5 elements
for (line in lines) {
elements <- unlist(strsplit(line, "\t"))
if (length(elements) < 5) {
elements <- c(elements, rep("0", 5 - length(elements)))
}
fixed_lines <- c(fixed_lines, paste(elements, collapse = "\t"))
}
airline <- read.table( fixed_lines, header = TRUE)
airline <- as.data.frame(fixed_lines)
View(airline)
# Read the file into a variable
lines <- readLines("airline.dat")
# Initialize an empty list to store fixed lines
fixed_lines <- list()
# Iterate through each line and fix lines with fewer than 5 elements
for (line in lines) {
elements <- unlist(strsplit(line, "\t"))
if (length(elements) < 5) {
elements <- c(elements, rep("0", 5 - length(elements)))
}
fixed_lines <- c(fixed_lines, paste(elements, collapse = "\t"))
}
# Convert fixed lines to a data frame
data_matrix <- do.call(rbind, lapply(fixed_lines, function(x) strsplit(x, "\t")[[1]]))
colnames(data_matrix) <- data_matrix[1, ]
data_matrix <- data_matrix[-1, ]
airline_df <- as.data.frame(data_matrix, stringsAsFactors = FALSE)
# Convert appropriate columns to numeric
airline_df <- transform(airline_df,
Price = as.numeric(Price),
Number_of_Hours_Late = as.numeric(Number_of_Hours_Late),
Number_Cancelled_per_Day_per_500 = as.numeric(Number_Cancelled_per_Day_per_500),
Bag_Delivery_Time = as.numeric(Bag_Delivery_Time),
Number_Lost_Bags = as.numeric(Number_Lost_Bags))
# Display the first few rows of the data to ensure it is read correctly
head(airline_df)
mean(airline_df$Price)
var(airline_df$Price)
# Read the file into a variable
lines <- readLines("airline.dat")
# Initialize an empty list to store fixed lines
fixed_lines <- list()
# Iterate through each line and fix lines with fewer than 5 elements
for (line in lines) {
elements <- unlist(strsplit(line, "\t"))
if (length(elements) < 5) {
elements <- c(elements, rep("0", 5 - length(elements)))
}
fixed_lines <- c(fixed_lines, paste(elements, collapse = "\t"))
}
# Convert fixed lines to a data frame
data_matrix <- do.call(rbind, lapply(fixed_lines, function(x) strsplit(x, "\t")[[1]]))
colnames(data_matrix) <- data_matrix[1, ]
data_matrix <- data_matrix[-1, ]
airline_df <- as.data.frame(data_matrix, stringsAsFactors = FALSE)
# Convert appropriate columns to numeric
airline_df <- transform(airline_df,
Price = as.numeric(Price),
Number_of_Hours_Late = as.numeric(Number_of_Hours_Late),
Number_Cancelled_per_Day_per_500 = as.numeric(Number_Cancelled_per_Day_per_500),
Bag_Delivery_Time = as.numeric(Bag_Delivery_Time),
Number_Lost_Bags = as.numeric(Number_Lost_Bags))
# Calculate the mean of the Price column
mean_price <- mean(airline_df$Price, na.rm = TRUE)
# Round the mean to four decimal places
mean_price_rounded <- round(mean_price, 4)
# Print the rounded mean
mean_price_rounded
mean(airline_df$Price, na.rm = TRUE)
var(airline_df$Price, na.rm = TRUE)
IQR(airline_df$Price, na.rm = TRUE)
range(airline_df$Price, na.rm = TRUE)
range(airline_df$Price, na.rm = TRUE)$2 - range(airline_df$Price, na.rm = TRUE)$1
(range(airline_df$Price, na.rm = TRUE))$2 - (range(airline_df$Price, na.rm = TRUE))$1
range(airline_df$Price, na.rm = TRUE)
rng <- range(airline_df$Price, na.rm = TRUE)
rng$2 - rng$1
rng[2] - rng[1]
skewness(airline_df$Price, na.rm = TRUE)
skewness(airline_df$Price)
kurtosis(airline_df$Price)
data<-c(6.649, 6.639, 6.629, 6.642, 6.624, 6.616, 6.649, 6.654, 6.649, 6.642, 6.649, 6.637, 6.649, 6.647, 6.644, 6.657, 6.654, 6.634, 6.644, 6.649)
df<-data.frame(data)
View(df)
frequency.dist.ungrouped(df$data)
frequency.polygon.ungrouped(df$data, main="Ungrouped Freq Polygon: Fans Data",xlab="CFM")
spc.run.chart(chart.series = df$data)
frequency.dist.ungrouped(df$data)
frequency.polygon.ungrouped(df$data, main="Ungrouped Freq Polygon: Fans Data",xlab="CFM")
require(lolcat)
viscosity <- read.table( "viscosity.txt", header = TRUE)
View(viscosity)
frequency.dist.ungrouped(viscosity$centistokes)
max(frequency.dist.ungrouped(viscosity$centistokes)[5])
max(frequency.dist.ungrouped(viscosity$centistokes)[4])
max(frequency.dist.ungrouped(viscosity$centistokes)[3])
max(frequency.dist.grouped(viscosity$centistokes)[3])
frequency.dist.grouped(viscosity$centistokes)
hist.grouped(viscosity$centistokes)
boxplot(viscosity$centistokes)
summary(viscosity$centistokes)
require(lolcat)
yield <- read.table( "yield.txt", header = TRUE)
View(yield)
require(lolcat)
yield <- read.table( "yield.txt", header = TRUE)
frequency.dist.grouped(yield$strength)
frequency.polygon.grouped(yield$strength)
hist.grouped(yield$strength)
plot(density(yield$strength))
hist.grouped(yield$strength)
lines(density(yield$strength))
hist.grouped(yield$strength, freq=F)
lines(density(yield$strength))
mean(df$data)
median(df$data)
mode(df$data)
summary.mode(df$data)
sample.mode(df$data)
plot(df$data)
hist.grouped(df$data, xlab="Weight", freq=F)
lines(density(df$data))
sd(df$data)
var(df$data)
summary.continuous(viscosity$centistokes)
frequency.dist.ungrouped(viscosity$centistokes)
range(viscosity$centistokes)[2]-range(viscosity$centistokes)[1]
quantile(viscosity$centistokes, 45)
quantile(viscosity$centistokes, probs = 45
quantile(viscosity$centistokes, probs = 45
quantile(viscosity$centistokes, probs = 45)
quantile(viscosity$centistokes, probs = .45)
quantile(viscosity$centistokes, probs = .25)
summary(viscosity$centistokes)
skewedness(yield$strength)
skewness(yield$strength)
kurtosis(yield$strength)
require(lolcat)
body <- read.table( "body.txt", header = TRUE)
View(body)
cor(body$height, body$weight, method="pearson")
Daily.Production <- read.table( "Daily Production.txt", header = TRUE)
Daily.Production <- read.table( "Daily_Production.txt", header = TRUE)
Daily.Production <- read.table( "Daily_Production.txt", header = TRUE)
Daily.Production <- read.table( "Daily_Production.txt", header = TRUE)
Daily_Production <- read.table( "Daily_Production.txt", header = TRUE)
